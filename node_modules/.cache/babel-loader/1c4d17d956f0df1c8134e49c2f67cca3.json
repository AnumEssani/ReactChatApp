{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/anum/Desktop/ReactChatApp/src/components/Chat.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Firebase from '../FirebaseConfig';\nimport { Divider, AppBar, Toolbar, Typography, Button, List, Container, Grid, Paper, Avatar, IconButton, TextField } from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport SendIcon from '@material-ui/icons/Send';\nexport class Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChatClick = data => {\n      this.setState({\n        chatUser: data\n      });\n      let currentUser = localStorage.getItem('uid');\n      let merge_uid = this.uid_merge(currentUser, data.uid);\n      this.getMessage(merge_uid);\n    };\n\n    this.getMessage = uid => {\n      Firebase.database().ref(`chats/${uid}`).on('child_added', snapshot => {\n        this.state.chats.push(snapshot.val());\n        this.setState({\n          chats: this.state.chats\n        });\n      });\n    };\n\n    this.send_message = () => {\n      let user = localStorage.getItem('uid');\n      let chat_user = this.state.chatUser;\n      let merge_uid = this.uid_merge(user, chat_user.uid);\n      Firebase.database().ref(`chats/${merge_uid}`).push({\n        message: this.state.message,\n        name: localStorage.getItem('name'),\n        uid: localStorage.getItem('uid')\n      });\n      this.setState({\n        message: \"\"\n      });\n    };\n\n    this.uid_merge = (a, b) => {\n      console.log(a + b);\n\n      if (a < b) {\n        return a + b;\n      } else {\n        return b + a;\n      }\n    };\n\n    this.Logout = () => {\n      Firebase.auth().signOut();\n      localStorage.clear();\n    };\n\n    this.state = {\n      chatUser: {},\n      chats: [],\n      message: \"\"\n    };\n  }\n\n  render() {\n    console.log(this.state.chats);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        position: \"fixed\",\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            alt: localStorage.getItem('name'),\n            src: localStorage.getItem('profile')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            style: {\n              flexGrow: 1\n            },\n            children: localStorage.getItem('name')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"inherit\",\n            onClick: this.Logout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        style: {\n          flexGrow: 1,\n          height: '100vh',\n          overflow: 'auto',\n          marginTop: '7%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Container, {\n          maxWidth: \"lg\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              md: 3,\n              children: /*#__PURE__*/_jsxDEV(Paper, {\n                style: {\n                  display: 'flex',\n                  overflow: 'auto',\n                  flexDirection: 'column'\n                },\n                children: Object.values(this.props.Users).map((data, i) => data.uid !== localStorage.getItem('uid') && /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(List, {\n                    style: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      padding: '5%'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                      src: data.profile\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 101,\n                      columnNumber: 45\n                    }, this), \" \", /*#__PURE__*/_jsxDEV(Typography, {\n                      style: {\n                        marginLeft: '4%'\n                      },\n                      variant: \"h5\",\n                      children: data.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 101,\n                      columnNumber: 75\n                    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                      onClick: () => this.onChatClick(data),\n                      children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 104,\n                        columnNumber: 96\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 45\n                    }, this)]\n                  }, data.name + i, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 44\n                  }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 48\n                  }, this)]\n                }, void 0, true))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 12,\n              md: 8,\n              children: Object.keys(this.state.chatUser).length ? /*#__PURE__*/_jsxDEV(Paper, {\n                style: {\n                  display: 'flex',\n                  overflow: 'auto',\n                  flexDirection: 'column',\n                  minHeight: 500\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    background: '#3f51b5'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(Toolbar, {\n                    children: [/*#__PURE__*/_jsxDEV(Avatar, {\n                      alt: this.state.chatUser.name,\n                      src: this.state.chatUser.profile\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h6\",\n                      style: {\n                        flexGrow: 1,\n                        color: 'white'\n                      },\n                      children: this.state.chatUser.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 120,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    height: '412px',\n                    overflowY: 'scroll'\n                  },\n                  children: this.state.chats.map((v, i) => {\n                    return /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: v.uid !== localStorage.getItem('uid') ? 'otherUser' : 'currentUser',\n                      children: [\" \", /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: v.message\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 129,\n                        columnNumber: 139\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 129,\n                      columnNumber: 53\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 126,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: 'flex',\n                    padding: '20px 20px',\n                    background: 'lightgray'\n                  },\n                  children: [\" \", /*#__PURE__*/_jsxDEV(TextField, {\n                    label: \"Type Your Massage .....\",\n                    fullWidth: true,\n                    value: this.state.message,\n                    onChange: e => this.setState({\n                      message: e.target.value\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 122\n                  }, this), \" \", /*#__PURE__*/_jsxDEV(IconButton, {\n                    onClick: this.send_message,\n                    children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 134,\n                      columnNumber: 306\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 266\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 134,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 37\n              }, this) : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  Users: state.user,\n  currentUser: state.currentUser\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat);","map":{"version":3,"sources":["/home/anum/Desktop/ReactChatApp/src/components/Chat.jsx"],"names":["React","Component","connect","Firebase","Divider","AppBar","Toolbar","Typography","Button","List","Container","Grid","Paper","Avatar","IconButton","TextField","ChevronRightIcon","SendIcon","Chat","constructor","props","onChatClick","data","setState","chatUser","currentUser","localStorage","getItem","merge_uid","uid_merge","uid","getMessage","database","ref","on","snapshot","state","chats","push","val","send_message","user","chat_user","message","name","a","b","console","log","Logout","auth","signOut","clear","render","flexGrow","height","overflow","marginTop","display","flexDirection","Object","values","Users","map","i","alignItems","padding","profile","marginLeft","keys","length","minHeight","background","color","overflowY","v","e","target","value","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Firebase from '../FirebaseConfig'\nimport {\n    Divider,\n    AppBar,\n    Toolbar,\n    Typography,\n    Button,\n    List,\n    Container,\n    Grid,\n    Paper,\n    Avatar,\n    IconButton,\n    TextField\n} from '@material-ui/core';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport SendIcon from '@material-ui/icons/Send';\n\nexport class Chat extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chatUser: {},\n            chats: [],\n            message: \"\"\n        }\n    }\n    onChatClick = (data) => {\n        this.setState({ chatUser: data })\n        let currentUser = localStorage.getItem('uid');\n        let merge_uid = this.uid_merge(currentUser, data.uid);\n        this.getMessage(merge_uid)\n    }\n    getMessage = (uid) => {\n        Firebase.database().ref(`chats/${uid}`).on('child_added', snapshot => {\n            this.state.chats.push(snapshot.val())\n            this.setState({\n                chats: this.state.chats\n            })\n        })\n    }\n    send_message = () => {\n        let user = localStorage.getItem('uid');\n        let chat_user = this.state.chatUser;\n        let merge_uid = this.uid_merge(user, chat_user.uid);\n        Firebase.database().ref(`chats/${merge_uid}`).push({\n            message: this.state.message,\n            name: localStorage.getItem('name'),\n            uid: localStorage.getItem('uid'),\n        })\n        this.setState({\n            message: \"\"\n        })\n    }\n    uid_merge = (a, b) => {\n        console.log(a + b)\n        if (a < b) {\n            return a + b\n        } else {\n            return b + a\n        }\n\n    }\n\n    Logout = () => {\n        Firebase.auth().signOut();\n        localStorage.clear()\n    }\n    render() {\n        console.log(this.state.chats)\n        return (\n            <div>\n                <AppBar position=\"fixed\">\n                    <Toolbar>\n                        <Avatar alt={localStorage.getItem('name')} src={localStorage.getItem('profile')} />\n                        <Typography variant=\"h6\" style={{ flexGrow: 1 }}>\n\n                            {localStorage.getItem('name')}\n                        </Typography>\n                        <Button color=\"inherit\" onClick={this.Logout}>Logout</Button>\n                    </Toolbar>\n                </AppBar>\n                <main style={{\n                    flexGrow: 1,\n                    height: '100vh',\n                    overflow: 'auto',\n                    marginTop: '7%'\n                }}>\n                    <Container maxWidth=\"lg\">\n                        <Grid container spacing={3}>\n                            <Grid item xs={6} md={3}>\n                                <Paper style={{\n                                    display: 'flex',\n                                    overflow: 'auto',\n                                    flexDirection: 'column',\n                                }}>\n                                    {Object.values(this.props.Users).map((data, i) => data.uid !== localStorage.getItem('uid') &&\n                                        (<><List key={data.name + i} style={{ display: 'flex', alignItems: 'center', padding: '5%' }} >\n                                            <Avatar src={data.profile} /> <Typography style={{ marginLeft: '4%' }} variant=\"h5\">\n                                                {data.name}\n                                            </Typography>\n                                            <IconButton onClick={() => this.onChatClick(data)}><ChevronRightIcon /></IconButton>\n                                        </List><Divider />\n                                        </>))}\n                                </Paper>\n                            </Grid>\n                            <Grid item xs={12} md={8}>\n                                {Object.keys(this.state.chatUser).length ?\n                                    <Paper style={{\n                                        display: 'flex',\n                                        overflow: 'auto',\n                                        flexDirection: 'column',\n                                        minHeight: 500\n                                    }}>\n                                        <div style={{ background: '#3f51b5' }}>\n                                            <Toolbar>\n                                                <Avatar alt={this.state.chatUser.name} src={this.state.chatUser.profile} />\n                                                <Typography variant=\"h6\" style={{ flexGrow: 1, color: 'white' }}>\n\n                                                    {this.state.chatUser.name}\n                                                </Typography>\n                                            </Toolbar>\n                                        </div>\n                                        <div style={{ height: '412px', overflowY: 'scroll' }}>\n                                            {this.state.chats.map((v, i) => {\n                                                return (\n                                                    <div className={v.uid !== localStorage.getItem('uid') ? 'otherUser' : 'currentUser'}> <p>{v.message}</p></div>\n                                                )\n\n                                            })}\n                                        </div>\n                                        <div style={{ display: 'flex', padding: '20px 20px', background: 'lightgray' }}> <TextField label=\"Type Your Massage .....\" fullWidth value={this.state.message} onChange={(e) => this.setState({ message: e.target.value })} /> <IconButton onClick={this.send_message}><SendIcon /></IconButton></div>\n                                    </Paper>\n                                    : null}\n                            </Grid>\n                        </Grid>\n                    </Container>\n                </main>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    Users: state.user,\n    currentUser: state.currentUser\n})\n\nconst mapDispatchToProps = dispatch => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat)\n"]},"metadata":{},"sourceType":"module"}